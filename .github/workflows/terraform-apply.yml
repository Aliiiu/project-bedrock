name: 'Terraform Apply'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ vars.TF_STATE_KEY }}" \
          -backend-config="region=${{ vars.AWS_REGION }}"

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="aws_region=${{ vars.AWS_REGION }}" \
          -var="environment=${{ vars.ENVIRONMENT }}" \
          -var="domain_name=${{ vars.DOMAIN_NAME }}" \
          -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name $(terraform output -raw cluster_name)

    - name: Deploy Application
      run: |
        # Deploy the retail store application
        kubectl apply -f https://github.com/aws-containers/retail-store-sample-app/releases/latest/download/kubernetes.yaml

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment --all
    
    - name: Get the UI service URL
      run: |
        kubectl get svc ui

    - name: Get Application Status
      run: |
        echo "=== Cluster Info ==="
        kubectl cluster-info
        echo ""
        echo "=== Pods Status ==="
        kubectl get pods -A
        echo ""
        echo "=== Services ==="
        kubectl get svc -A
        echo ""
        echo "=== Ingress ==="
        kubectl get ingress -A

    - name: Output Developer Credentials
      run: |
        echo "=== Console Credentials (Browser Login) ==="
        echo "Username: $(terraform output -raw cluster_name)-developer"
        echo "Password: $(terraform output -raw developer_password)"
        echo ""
        echo "=== API Credentials (Programmatic Access) ==="
        echo "Access Key ID: $(terraform output -raw developer_access_key_id)"
        echo "Secret Access Key: $(terraform output -raw developer_secret_access_key)"
        echo ""
        echo "=== Additional Info ==="
        echo "Cluster Name: $(terraform output -raw cluster_name)"
        echo "Region: ${{ vars.AWS_REGION }}"
        echo "AWS Console URL: https://console.aws.amazon.com/"

  deploy-ingress:
    name: 'Deploy Ingress (Bonus)'
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: ${{ vars.ENABLE_INGRESS == 'true' }}
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.CLUSTER_NAME }}

    - name: Deploy Ingress
      run: |
        kubectl apply -f k8s-manifests/ingress/

    - name: Wait for Load Balancer
      run: |
        kubectl wait --for=condition=ready --timeout=600s ingress/retail-store-ingress

    - name: Get Load Balancer URL
      run: |
        echo "Application URL: $(kubectl get ingress retail-store-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"