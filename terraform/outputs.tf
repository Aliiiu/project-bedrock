output "cluster_name" {
  description = "EKS cluster name"
  value       = module.eks.cluster_name
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  description = "Security group ID attached to the EKS cluster"
  value       = module.eks.cluster_security_group_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = <<-EOT
    aws eks update-kubeconfig --region ${var.aws_region} --name ${module.eks.cluster_name}
  EOT
}

output "developer_access_key_id" {
  description = "Access key ID for developer user"
  value       = module.iam.developer_access_key_id
  sensitive   = true
}

output "developer_secret_access_key" {
  description = "Secret access key for developer user"
  value       = module.iam.developer_secret_access_key
  sensitive   = true
}

output "developer_password" {
  description = "Password for developer user console access"
  value       = module.iam.developer_password
  sensitive   = true
}

output "vpc_id" {
  description = "VPC ID"
  value       = module.vpc.vpc_id
}

output "private_subnet_ids" {
  description = "Private subnet IDs"
  value       = module.vpc.private_subnet_ids
}

output "public_subnet_ids" {
  description = "Public subnet IDs"
  value       = module.vpc.public_subnet_ids
}

# Bonus outputs
output "mysql_endpoint" {
  description = "MySQL RDS endpoint"
  value       = var.enable_managed_databases ? module.rds[0].mysql_endpoint : null
}

output "postgres_endpoint" {
  description = "PostgreSQL RDS endpoint"
  value       = var.enable_managed_databases ? module.rds[0].postgres_endpoint : null
}

output "dynamodb_table_name" {
  description = "DynamoDB table name"
  value       = var.enable_managed_databases ? module.rds[0].dynamodb_table_name : null
}

output "certificate_arn" {
  description = "ACM certificate ARN"
  value       = var.enable_ssl_certificate && var.domain_name != "" ? aws_acm_certificate.main[0].arn : null
}

output "route53_zone_id" {
  description = "Route 53 hosted zone ID"
  value       = var.enable_route53 && var.domain_name != "" ? aws_route53_zone.main[0].zone_id : null
}

output "load_balancer_hostname" {
  description = "Load balancer hostname"
  value       = var.enable_alb_controller ? "Will be available after ingress deployment" : null
}